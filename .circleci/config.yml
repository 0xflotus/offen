version: 2

build_preconditions: &build_preconditions
  requires:
    - server
    - vault
    - script
    - auditorium
    - packages
    - integration
  filters:
    branches:
      only:
        - master
        - development

jobs:
  server:
    docker:
      - image: circleci/golang:1.13
        environment:
          OFFEN_APP_EVENTRETENTIONPERIOD: 4464h
          OFFEN_DATABASE_DIALECT: postgres
          OFFEN_DATABASE_CONNECTIONSTRING: postgres://circle:test@localhost:5432/circle_test?sslmode=disable
          OFFEN_SECRETS_COOKIEEXCHANGE: VswgMshC4mPDfey8o+yScg==
          OFFEN_SECRETS_EMAILSALT: IDOARoANjJYE6vbLo4L57w==
      - image: circleci/postgres:11.2-alpine
        environment:
          - POSTGRES_USER=circle
          - POSTGRES_PASSWORD=test
    working_directory: ~/offen/server
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-server-{{ checksum "go.mod" }}
      - run:
          name: Download modules
          command: go mod download
      - save_cache:
          paths:
            - /go/pkg/mod
          key: offen-server-{{ checksum "go.mod" }}
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Prepare static assets
          command: |
            go get github.com/rakyll/statik
            statik -dest public -src public
      - run:
          name: Run tests
          command: |
            cp ~/offen/bootstrap.yml .
            make test-ci

  vault:
    docker:
      - image: circleci/node:12-browsers
    working_directory: ~/offen/vault
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-vault-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - ~/offen/vault/node_modules
          key: offen-vault-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test

  script:
    docker:
      - image: circleci/node:12-browsers
    working_directory: ~/offen/script
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-script-{{ checksum "package.json" }}
      - run:
          name: Install lsof
          command: sudo apt-get install lsof
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - ~/offen/script/node_modules
          key: offen-script-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test

  auditorium:
    docker:
      - image: circleci/node:12-browsers
    working_directory: ~/offen/auditorium
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-auditorium-{{ checksum "package.json" }}
      - run:
          name: Install lsof
          command: sudo apt-get install lsof
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - ~/offen/auditorium/node_modules
          key: offen-auditorium-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test

  packages:
    docker:
      - image: circleci/node:12-browsers
    working_directory: ~/offen/packages
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-packages-{{ checksum "package.json" }}
      - run:
          name: Install lsof
          command: sudo apt-get install lsof
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - ~/offen/packages/node_modules
          key: offen-packages-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test

  integration:
    docker:
      - image: circleci/node:12-browsers
    working_directory: ~/offen
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build binary
          command: make build
      - run:
          name: Setup application
          command: sudo ./offen bootstrap -email circle@offen.dev -name circle -password secret
      - run:
          name: Serve application
          command: OFFEN_SERVER_PORT=8080 sudo ./offen
          background: true
      - run:
          name: Wait for server to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 8080 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for server && exit 1
      - run:
          name: Check URLs
          command: |
            curl -sS -X GET localhost:8080 > /dev/null
            curl -sS -X GET localhost:8080/script.js > /dev/null
            curl -sS -X GET localhost:8080/vault/ > /dev/null
            curl -sS -X GET localhost:8080/auditorium/ > /dev/null

  build:
    docker:
      - image: docker:18-git
    working_directory: ~/offen
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/offen.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/offen.tar | true
      - run:
          name: Build application Docker image and binary
          command: |
            export OFFEN_GIT_REVISION=$(git rev-parse --short HEAD)
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              export DOCKER_IMAGE_TAG="stable"
            else
              export DOCKER_IMAGE_TAG="latest"
            fi
            docker build --build-arg rev=$OFFEN_GIT_REVISION -t offen/offen:$DOCKER_IMAGE_TAG -f build/Dockerfile .
            # next, extract the single binary from the container so it can
            # be stored as a build artifact (this needs to be formalized into
            # versioned releases at some point)
            docker create -it --name builder offen/offen:$DOCKER_IMAGE_TAG ash
            docker cp builder:/offen .
            docker rm -f builder
            mkdir -p /tmp/artifacts
            tar -czvf /tmp/artifacts/offen-$DOCKER_IMAGE_TAG.tar.gz offen
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/offen.tar offen/offen
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/server.tar
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              export DOCKER_IMAGE_TAG="stable"
            else
              export DOCKER_IMAGE_TAG="latest"
            fi
            echo "$DOCKER_ACCESSTOKEN" | docker login --username $DOCKER_USER --password-stdin
            docker push offen/offen:$DOCKER_IMAGE_TAG
      - store_artifacts:
          path: /tmp/artifacts

workflows:
  version: 2
  test_build:
    jobs:
      - server
      - vault
      - script
      - auditorium
      - packages
      - integration
      - build:
          <<: *build_preconditions
