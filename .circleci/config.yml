version: 2

jobs:
  server:
    docker:
      - image: circleci/golang:1.13
        environment:
          OFFEN_APP_EVENTRETENTIONPERIOD: 4464h
          OFFEN_DATABASE_DIALECT: postgres
          OFFEN_DATABASE_CONNECTIONSTRING: postgres://circle:test@localhost:5432/circle_test?sslmode=disable
          OFFEN_SECRETS_COOKIEEXCHANGE: VswgMshC4mPDfey8o+yScg==
          OFFEN_SECRETS_EMAILSALT: IDOARoANjJYE6vbLo4L57w==
      - image: circleci/postgres:11.2-alpine
        environment:
          - POSTGRES_USER=circle
          - POSTGRES_PASSWORD=test
    working_directory: ~/offen/server
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-server-{{ checksum "go.mod" }}
      - run:
          name: Download modules
          command: go mod download
      - save_cache:
          paths:
            - /go/pkg/mod
          key: offen-server-{{ checksum "go.mod" }}
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Prepare static assets
          command: |
            go get github.com/rakyll/statik
            statik -dest public -src public
      - run:
          name: Run tests
          command: |
            cp ~/offen/bootstrap.yml .
            make test-ci

  vault:
    docker:
      - image: circleci/node:12-browsers
    working_directory: ~/offen/vault
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-vault-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - ~/offen/vault/node_modules
          key: offen-vault-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test

  script:
    docker:
      - image: circleci/node:12-browsers
    working_directory: ~/offen/script
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-script-{{ checksum "package.json" }}
      - run:
          name: Install lsof
          command: sudo apt-get install lsof
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - ~/offen/script/node_modules
          key: offen-script-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test

  auditorium:
    docker:
      - image: circleci/node:12-browsers
    working_directory: ~/offen/auditorium
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-auditorium-{{ checksum "package.json" }}
      - run:
          name: Install lsof
          command: sudo apt-get install lsof
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - ~/offen/auditorium/node_modules
          key: offen-auditorium-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test

  packages:
    docker:
      - image: circleci/node:12-browsers
    working_directory: ~/offen/packages
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-packages-{{ checksum "package.json" }}
      - run:
          name: Install lsof
          command: sudo apt-get install lsof
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - ~/offen/packages/node_modules
          key: offen-packages-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test

  integration:
    docker:
      - image: circleci/node:12-browsers
    working_directory: ~/offen
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build binary
          command: |
            make build
            cp ./bin/offen-linux-amd64 ./offen
      - run:
          name: Setup application
          command: |
            touch offen.env
            sudo ./offen setup -email circle@offen.dev -name circle -password secret -populate
      - run:
          name: Serve application
          command: OFFEN_SERVER_PORT=8080 sudo ./offen
          background: true
      - run:
          name: Wait for server to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 3000 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for server && exit 1
      - run:
          name: Check URLs
          command: |
            curl -sS -X GET localhost:3000 > /dev/null
            curl -sS -X GET localhost:3000/script.js > /dev/null
            curl -sS -X GET localhost:3000/vault/ > /dev/null
            curl -sS -X GET localhost:3000/auditorium/ > /dev/null
            curl -sS -X GET localhost:3000/healthz > /dev/null
            curl -sS -X GET localhost:3000/versionz > /dev/null

  build:
    docker:
      - image: circleci/golang:1.13
    working_directory: ~/offen
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image and binary
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              if [ "${CIRCLE_BRANCH}" == "master" ]; then
                echo "Skipping build for master with no tags."
                exit 0
              fi
              export OFFEN_GIT_REVISION=$(git rev-parse --short HEAD)
              export DOCKER_IMAGE_TAG="latest"
            else
              export OFFEN_GIT_REVISION=$CIRCLE_TAG
              export DOCKER_IMAGE_TAG=$CIRCLE_TAG
            fi

            TARGETS=linux/amd64,windows/amd64 make build
            # Darwin builds cannot be statically linked right now
            # so we override the default LDFLAGS value
            TARGETS=darwin/amd64 LDFLAGS='' make build
            make build-docker

            mkdir -p /tmp/artifacts
            cd ./bin && md5sum * > checksums.txt && cp ~/offen/LICENSE . && cp ~/offen/README.md . && tar -czvf /tmp/artifacts/offen-$DOCKER_IMAGE_TAG.tar.gz $(ls -A)

            echo "$DOCKER_ACCESSTOKEN" | docker login --username $DOCKER_USER --password-stdin

            if [ ! -z "$CIRCLE_TAG" ]; then
              docker tag offen/offen:$DOCKER_IMAGE_TAG offen/offen:stable
              docker push offen/offen:stable
            fi
            docker push offen/offen:$DOCKER_IMAGE_TAG
      - store_artifacts:
          path: /tmp/artifacts

workflows:
  version: 2
  test:
    jobs:
      - server: &all_tags_filter
          filters:
            tags:
              only: /.*/
      - vault:
          <<: *all_tags_filter
      - script:
          <<: *all_tags_filter
      - auditorium:
          <<: *all_tags_filter
      - packages:
          <<: *all_tags_filter
      - integration:
          <<: *all_tags_filter
      - build:
          requires:
            - server
            - vault
            - script
            - auditorium
            - packages
            - integration
          filters:
            tags:
              only: /^v.*/ # tagged release from master branch
                - /^v.*/
            branches:
              only: development # "latest" release from development branch
